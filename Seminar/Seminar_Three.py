# –õ–µ–∫—Ü–∏—è –¥–≤–∞
# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'a')
# data.writelines(colors)
# data.write('\nLINE12\n')
# data.write('LINE31\n')
# data.close()

# # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è with
# with open('file.txt', 'a') as data:
#     data.write('line 11\n')
#     data.write('line 12\n')


# exit()
# path = 'file.txt'
# data = open(path, 'r')
# for line in data:
#     print(line)
# data.close()

# /////////////////////////////////////////////////////////////////
# –§—É–Ω–∫—Ü–∏–∏

# import Seminar_One as number_function
# print(number_function.f(1))

# def new_string(symbol, count=3):
#     return symbol * count
#
#
# print(new_string('!', 5))
# print(new_string('!'))
# print(new_string(4))

# def concatenatio(*params):
#     res: str = ""
#     for iten in params:
#         res += iten
#     return res
#
#
# print(concatenatio('a', 's', 'e', 't'))
# print(concatenatio('3', 't'))

# /////////////////////////////////////////////////////////////////////////
# –†–µ–∫—É—Ä—Å–∏—è

# –§–∏–±–æ–Ω–∞—á–∏
# def fib(n):
#     if n in [1, 2]:
#         return 1
#     else:
#         return fib(n - 1) + fib(n - 2)
#
#
# list = []
# for e in range(1, 10):
#     list.append(fib(e))
# print(list)

# –ö–æ—Ä—Ç–µ–∂–∏ - –Ω–µ –∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫

# a = (3, 4, 5, 8)
# # print(a)
# # print(a[0])
# # print(a[1])
#
# for item in a:
#     print(item)

# t = tuple(['red', 'green', 'black'])
# red, green, black = t
# print('r:{} g:{} b:{}'.format(red, green, black))

# –°–ª–æ–≤–∞—Ä–∏

# # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
# dict = {}
# dict = \
#     {
#         'up': '‚Üë',
#         'left': '‚Üê',
#         'down': '‚Üì',
#         'right': '‚Üí'
#     }
#
# print(dict)
# print(dict['right'])
#
# for k in dict.keys():
#     print(k)
#
# for i in dict.items():
#     print(i)
#
# for v in dict.values():
#     print(v)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞
# colors = {'red', 'green', 'blue'}
# print(type(colors))
# print(colors)
#
# colors.add('grey')
# print(colors)
#
# colors.remove('red')
# print(colors)
#
# colors.discard('green')
# print(colors)
#
# colors.clear()
# print(colors)
#
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy()
# print(c)
#
# u = a.union(b)
# print(u)
#
# i = a.intersection(b)
# print(i)
#
# dl = a.difference(b)
# print(dl)
#
# dr = b.difference(a)
# print(dr)
#
#
# q = a \
#     .union(b) \
#     .difference(a.intersection(b))
#
# print(q)
#
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b)

# # –°–ø–∏—Å–∫–∏
#
# list1 = [1, 2, 3, 4, 5]
# list2 = list1
#
# list1[0] = 123
# list1[1] = 333
#
# for e in list1:
#     print(e)
#
# print()
#
# for e in list2:
#     print(e)
#
# print(list1.pop())
# print(list1)
# print(list1.pop())
# print(list1)
# print(list1.pop())
# print(list1)
# print(list1.pop())
# print(list1)
#
# list1.append(45)
# print(list1)
# list1.insert(1, 11)
# print(list1)
# list1.insert(2, 12)
# print(list1)

# ///////////////////////////////////////////////////////////////////////////////////////////
# –°–µ–º–∏–Ω–∞—Ä –¢–†–ò

# –û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞
#
# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ "–û" –∏ "–†".
# –ë—É–∫–≤–∞ "–û" ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—é –û—Ä–ª–∞, –∞ –±—É–∫–≤–∞ "–†" ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—é –†–µ—à–∫–∏.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ "–û" –∏ "–†".
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫ –Ω–µ—Ç, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
# 0
# 0.
#
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# –û–†–†–û–†–û–†–û–û–†–†–†–û
# Sample Output 1:
# 3
# Sample Input 2:
# –û–û–û–û–û–û–†–†–†–û–†–û–†–†–†–†–†–†–†
# Sample Output 2:
# 7
# Sample Input 3:
# –û–û–û–û–†–†–†–†–û–†–û–†–†–†–†–†–†–†–†–û–û–†–û–†–û–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†
# Sample Output 3:
# 31
#
# str = input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ')
#
# count = 0
# mas = []
# for s in str:
#     if s == '–†':
#         count += 1
#     else:
#         count = 0
#
#     mas.append(count)
#
# print(f'–ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫: {max(mas)}')

# # —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
# s = input()
# t = 0
# while "–†" * (t + 1) in s:
#     t += 1
#     if t != 0:
#         print(t)
#     else:
#         print(0)


# ///////////////////////////////////////////////////////////////////////////////////////////
# –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ê–Ω—Ç–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ì–∏–ª—Ñ–æ–π–ª–æ–º, –≤–∑–ª–æ–º–∞–ª —Å–µ—Ç—å —É–º–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤.
# –¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ "–ü–µ–≥–æ–≥–æ –¥—É–¥–æ—á–Ω–∏–∫–∞".
# –ü–æ–º–æ–≥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ñ–∏—Ä–º—ã –æ—Ç—ã—Å–∫–∞—Ç—å –≤—Å–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏.
#
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä,
# –∏ –µ—Å–ª–∏ –≤ –Ω–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤–æ "anton" (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤—ã, –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ
# –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤), —Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ä–∞–∂–µ–Ω –∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞,
# –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—ë—Ç—Å—è —á–∏—Å–ª–æ
# n
# n ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤. –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö
# n
# n —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –æ—Ç
# 5
# 5 –¥–æ
# 100
# 100 —Å–∏–º–≤–æ–ª–æ–≤.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
# –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
#
# Sample Input 1:
# 6
# 222anton456
# a1n1t1o1n1
# 0000a0000n00t00000o000000n
# gylfole
# richard
# ant0n
# Sample Output 1:
# 1 2 3
# Sample Input 2:
# 9
# osfjwoiergwoignaewpjofwoeijfnwfonewfoignewtowenffnoeiwowjfninoiwfen
# anton
# aoooooooooontooooo
# elelelelelelelelelel
# ntoneeee
# tonee
# 253235235a5323352n25235352t253523523235oo235523523523n
# antoooooooooooooooooooooooooooooooooooooooooooooooooooon
# unton
# Sample Output 2:
# 1 2 7 8
#
# # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
# dict_holod = {}
#
# # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
# key_user = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤: '))
# for count in range(key_user):
#     dict_holod[count] = input(f'–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ {count + 1}: ')
#
# # print(dict_holod)
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–∞–∂–µ–Ω –ª–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
# # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞
# numbers_hol = 1
#
# # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤
# result = ''
#
# # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤
# for values in dict_holod.values():
#     str_hol = values
#     string = ''
#     for s in str_hol:
#         if s == 'a':
#             string = s
#         elif s == 'n' and string == 'a':
#             string += s
#         elif s == 't' and string == 'an':
#             string += s
#         elif s == 'o' and string == 'ant':
#             string += s
#         elif s == 'n' and string == 'anto':
#             string += s
#
#     # –ï—Å–ª–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ä–∞–∂–µ–Ω —Ç–æ –≤–Ω–æ—Å–∏–º –µ–≥–æ –≤ –Ω–æ–º–µ—Ä –≤ result
#     if string == 'anton':
#         result = result + ' ' + str(numbers_hol)
#
#     numbers_hol += 1
#
# # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
# print(f'–ù–æ–º–µ—Ä–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤:{result}')


# //////////////////////////////////////////////////////////////////
# # –ó–∞–¥–∞—á–∞ —Å –ø—Ä–µ–¥–∏–∫—Ç–∞—Ç–∞–º–∏
# for x in range(2):
#     for y in range(2):
#         for z in range(2):
#             print(not (x or y or z) == (not x and not y and not z))


# ///////////////////////////////////////////////////////////////////////////////////////////
# –ó–∞–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç,
# –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–æ–∫ –Ω–µ–∫–æ–µ —á–∏—Å–ª–æ.
string = ['tyh', 1, 'yuj', 4, 'etr']
number = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ:'))

if number in string:
    print("Yes")
else:
    print('No')
