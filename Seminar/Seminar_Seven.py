# # Рекурсивное нахождеение суммы вложенных списков
# def suma(list_number):
#     result = 0
#     for element in list_number:
#         if type(element) == type([]):
#             result += suma(element)
#         else:
#             result += element
#     return result
#
#
# print(f'Сумма элементов {suma([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])}')

# //////////////////////////////////////////////////////////////////////////////////////////////////////////////
# # 1.напечатать сторку в одну линию - C:\WINDOWS\System32\drivers\etc\nst
#
# print('C:\WINDOWS\System32\drivers\etc\\nst')

# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# # записать в список все буквы строки f=‘"privet"’
# f = "'privet'"
#
# print([i for i in f])


# //////////////////////////////////////////////////////////////////////////////////////////////////////////////
# # преобразовать список таким образом
# a = [4, 3, -10, 1, 7, 12]
# [4, -10, 12, 3, 1, 7]
# a = [4, 3, -10, 1, 7, 12]
#
# # print(sorted(a, key=lambda x: x % 2))
# # Решение преподавателя
# a.sort(key=lambda x: x % 2)
# print(a)

# //////////////////////////////////////////////////////////////////////////////////////////////////////////////
# # 3)На вход программы поступает список наименований рек, записанных в одну строчку через пробел.
# # Необходимо отсортировать этот список в порядке убывания длин названий.
# # Результат вывести в одну строчку через пробел.
# #
# # Sample Input:
# # Лена Енисей Волга Дон
# # Sample Output:
# # Енисей Волга Лена Дон
#
# print(' '.join((sorted(input('Наименование рек, через пробел: ').split(' '), key=len))[::-1]))

# /////////////////////////////////////////////////////////////////////////////////////////////////////////
# # 4) Вводится строка. Требуется, используя введенную строку, сформировать N=10 пар кортежей в формате:
# #
# # (символ, порядковый индекс)
# #
# # Первый индекс имеет значение 0. Строка может быть короче 10 символов, а может быть и длиннее.
# # То есть, число пар может быть 10 и менее. Используя функцию zip сформируйте
# # указанные кортежи и сохраните в список с именем lst.
#
# one_lst =[i for i in input('Введите строку: ')]
# lst = list(zip(one_lst, [i for i in range(len(one_lst))]))
# print(lst)

# ////////////////////////////////////////////////////////////////////////////////////////////////////////////
# # 4. Напишите программу, которая подсчитает и выведет сумму квадратов всех двузначных чисел, делящихся на 9.
# # При решении задачи используйте комбинацию функций filter, map, sum.
# #
# # Обратите внимание: на 9 должно делиться исходное двузначное число, а не его квадрат.
#
# numbers = [int(x) for x in input('Введите числа: ').split(' ')]
# filtered = list(filter(lambda x: x ** 2 % 9 == 0, numbers))
# result = sum(list(map(lambda x: x ** 2, filtered)))
# print(result)

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////
# # 5. Напишите функцию triangle(a, b, c), которая принимает на вход три длины отрезков и определяет,
# # можно ли из этих отрезков составить треугольник.
# # Входные данные
# # Выходные данные
# # triangle(1, 1, 2)
# # Это не треугольник
# # triangle(7, 6, 10)
#
# def triangle(a, b, c):
#     if min(a, b, c) <= a < max(a, b, c) < a + min(a, b, c):
#         print('Это треугольник')
#     elif min(a, b, c) <= b < max(a, b, c) < b + min(a, b, c):
#         print('Это треугольник')
#     elif min(a, b, c) <= c < max(a, b, c) < c + min(a, b, c):
#         print('Это треугольник')
#     else:
#         print('Это не треугольник')
#
#
# triangle(6, 10, 6)
